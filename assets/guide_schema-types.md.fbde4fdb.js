import{_ as n,c as s,o as a,a as t}from"./app.7bb83f59.js";const f='{"title":"Schema types","description":"","frontmatter":{},"headers":[{"level":2,"title":"Properties","slug":"properties"},{"level":3,"title":"StringType","slug":"stringtype"},{"level":3,"title":"NumberType","slug":"numbertype"},{"level":3,"title":"BooleanType","slug":"booleantype"},{"level":3,"title":"DateType","slug":"datetype"}],"relativePath":"guide/schema-types.md"}',p={},o=t(`<h1 id="schema-types" tabindex="-1">Schema types <a class="header-anchor" href="#schema-types" aria-hidden="true">#</a></h1><p>Schema package, have all types needed to describe a javascript object:</p><ul><li><p><a href="#Properties">Properties</a></p><ul><li><a href="#StringType">StringType</a></li><li><a href="#number">NumberType</a></li><li><a href="#boolean">BooleanType</a></li><li><a href="#date">DateType</a></li></ul></li><li><p><a href="/schema/guide/object-type.html">Object</a></p></li><li><p><a href="/schema/guide/array-type.html">Array</a></p></li></ul><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><p>Schema package have 4 properties types, each one with it own built in validation rules:</p><ul><li>StringType</li><li>NumberType</li><li>BooleanType</li><li>DateType</li></ul><h3 id="stringtype" tabindex="-1">StringType <a class="header-anchor" href="#stringtype" aria-hidden="true">#</a></h3><p>The code below creates a validation schema for a property of type string that should have a minLength of 5.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;abcde&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.STRING.MIN_LENGTH</span>
</code></pre></div><p>Now let see what&#39;s happens if we add more than one validation. The string must have min length of 5, and must contains numbers.</p><p>Next code also show how to add a custom message to a validation rule.</p><p>And show what happens if we pass diferent type from what is expected.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;CUSTOM_MESSAGE&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">containsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>minLengthError<span class="token punctuation">,</span> containsNumberError<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>minLengthError<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CUSTOM_MESSAGE</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>containsNumberError<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.STRING.CONTAINS_NUMBER</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">55</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.STRING.INVALID_TYPE</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;a5b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CUSTOM_MESSAGE</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>The order in which validation rules are defined is the order they are executed, and the order in which they appers in the <code>validation.errors</code> array.</p></div><p>Schema validation will not execute any validation rules if the value is empty (null or undefined) unless the property schema is marked as required.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">containsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> requiredSchema <span class="token operator">=</span> <span class="token function">StringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">containsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.IS_REQUIRED</span>
</code></pre></div><div class="warning custom-block"><p class="custom-block-title">Note</p><p>The required rule is always the first to run. If an type is required, and that condition is not met, it will not execute next validation rules.</p></div><h3 id="numbertype" tabindex="-1">NumberType <a class="header-anchor" href="#numbertype" aria-hidden="true">#</a></h3><p>The code below creates a validation schema for a property of type <code>number</code> that should have a min value of 5.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.NUMBER.MIN</span>
</code></pre></div><p>Now let see what&#39;s happens if we add more than one validation. The <code>number</code> must have min value of 5, and must be an integer.</p><p>Next code also show how to add a custom message to a validation rule.</p><p>And show what happens if we pass diferent type from what is expected.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;CUSTOM_MESSAGE&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>minError<span class="token punctuation">,</span> isIntegerError<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>minError<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CUSTOM_MESSAGE</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isIntegerError<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.NUMBER.IS_INTEGER</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;6&#39;</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.NUMBER.INVALID_TYPE</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CUSTOM_MESSAGE</span>
</code></pre></div><p>Required vs non required property <code>NumberType</code></p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> requiredSchema <span class="token operator">=</span> <span class="token function">NumberType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.IS_REQUIRED</span>
</code></pre></div><h3 id="booleantype" tabindex="-1">BooleanType <a class="header-anchor" href="#booleantype" aria-hidden="true">#</a></h3><p>BooleanType do not have any built in validation besides isRequired and <code>boolean</code> type validation.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">BooleanType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> requiredSchema <span class="token operator">=</span> <span class="token function">BooleanType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERRORS.BOOLEAN.INVALID_TYPE</span>
</code></pre></div><h3 id="datetype" tabindex="-1">DateType <a class="header-anchor" href="#datetype" aria-hidden="true">#</a></h3><p>DateType validation is a validation schema for <code>new Date</code> object. It as some built in validation, but you can extend it and add more using <code>date-fns</code> package.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">DateType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> validation <span class="token operator">=</span> <span class="token keyword">await</span> schema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> requiredSchema <span class="token operator">=</span> <span class="token function">DateType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Can be a valid iso string</span>
validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;2022-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validation <span class="token operator">=</span> <span class="token keyword">await</span> requiredSchema<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>validation<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> validation<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>i18n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ERRORS.DATE.INVALID_TYPE</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>DateType property can be a <code>Date</code> object, a valid ISO date <code>string</code>, or a <code>number</code>. Any valid value we can pass to the constructor <code>new Date()</code></p></div>`,33),c=[o];function e(u,i,l,k,r,d){return a(),s("div",null,c)}var y=n(p,[["render",e]]);export{f as __pageData,y as default};
