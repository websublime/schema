import{_ as t,c as e,o as a,a as s}from"./app.7bb83f59.js";const u='{"title":"BaseSchemaType class","description":"","frontmatter":{},"headers":[{"level":2,"title":"BaseSchemaType class","slug":"baseschematype-class"},{"level":2,"title":"Constructors","slug":"constructors"},{"level":2,"title":"Properties","slug":"properties"},{"level":2,"title":"Methods","slug":"methods"}],"relativePath":"api/schema.baseschematype.md"}',r={},d=s(`<p><a href="./">Home</a> &gt; <a href="./schema.html">@websublime/schema</a> &gt; <a href="./schema.baseschematype.html">BaseSchemaType</a></p><h2 id="baseschematype-class" tabindex="-1">BaseSchemaType class <a class="header-anchor" href="#baseschematype-class" aria-hidden="true">#</a></h2><p>Base type model validation</p><p><b>Signature:</b></p><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">BaseSchemaType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> 
</code></pre></div><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-hidden="true">#</a></h2><table><thead><tr><th>Constructor</th><th>Modifiers</th><th>Description</th></tr></thead><tbody><tr><td><a href="./schema.baseschematype._constructor_.html">(constructor)(st)</a></td><td></td><td>Create mixed type instance</td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><table><thead><tr><th>Property</th><th>Modifiers</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./schema.baseschematype.items.html">items?</a></td><td></td><td>unknown</td><td><i>(Optional)</i> schema for ArraySchemaType items</td></tr><tr><td><a href="./schema.baseschematype.properties.html">properties?</a></td><td></td><td>unknown</td><td><i>(Optional)</i> Object with the schema for ObjectSchemaType</td></tr><tr><td><a href="./schema.baseschematype.required.html">required</a></td><td></td><td>boolean</td><td>Required property</td></tr><tr><td><a href="./schema.baseschematype.requirederrormessage.html">requiredErrorMessage</a></td><td></td><td>string</td><td>Required error message property</td></tr><tr><td><a href="./schema.baseschematype.rules.html">rules</a></td><td></td><td><a href="./schema.rule.html">Rule</a>[]</td><td>Validation rules</td></tr><tr><td><a href="./schema.baseschematype.schematype.html">schemaType</a></td><td></td><td><a href="./schema.schematype.html">schemaType</a></td><td>Type name</td></tr><tr><td><a href="./schema.baseschematype.trim.html">trim</a></td><td></td><td>boolean</td><td>Trims string</td></tr><tr><td><a href="./schema.baseschematype.type.html">type</a></td><td></td><td>string</td><td></td></tr></tbody></table><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><table><thead><tr><th>Method</th><th>Modifiers</th><th>Description</th></tr></thead><tbody><tr><td><a href="./schema.baseschematype.addrule.html">addRule({ errorMessage, params, validationFn })</a></td><td></td><td>Add validation rule.</td></tr><tr><td><a href="./schema.baseschematype.check.html">check(value, parent, context)</a></td><td></td><td>Test value types</td></tr><tr><td><a href="./schema.baseschematype.isempty.html">isEmpty(value)</a></td><td></td><td>Validate if value is empty</td></tr><tr><td><a href="./schema.baseschematype.isrequired.html">isRequired(errorMessage, trim)</a></td><td></td><td>Sign as require property</td></tr></tbody></table>`,11),h=[d];function c(o,p,i,n,m,l){return a(),e("div",null,h)}var b=t(r,[["render",c]]);export{u as __pageData,b as default};
